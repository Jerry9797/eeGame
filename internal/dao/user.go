// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"eeGame/internal/dao/internal"
	"eeGame/internal/model/entity"
	"github.com/gogf/gf/v2/frame/g"
)

// internalUserDao is internal type for wrapping internal DAO implements.
type internalUserDao = *internal.UserDao

// userDao is the data access object for table user.
// You can define custom methods on it to extend its functionality as you wish.
type userDao struct {
	internalUserDao
}

var (
	// User is globally public accessible object for table user operations.
	User = userDao{
		internal.NewUserDao(),
	}
)

func (u *userDao) Register(ctx context.Context, user entity.User) (int64, error) {
	insert, err := u.DB().Insert(ctx, "user", user)
	if err != nil {
		return 0, err
	}
	uid, err := insert.LastInsertId()
	if err != nil {
		return 0, err
	}
	return uid, err
}

func (u *userDao) GetUserByUsername(ctx context.Context, username string) (*entity.User, error) {
	var user entity.User
	if err := g.Model("user").Where("username", username).Scan(&user); err != nil {
		return &user, err
	}
	return &user, nil
}

func (u *userDao) GetUserById(ctx context.Context, uid int64) (*entity.User, error) {
	var user entity.User
	if err := g.Model("user").Where("uid", uid).Scan(&user); err != nil {
		return &user, err
	}
	return &user, nil
}
